{
  "ast": null,
  "code": "'use strict';\n/**\n * Check if a hostname is an IP. You should be aware that this only works\n * because `hostname` is already garanteed to be a valid hostname!\n *\n * @param {string} hostname\n * @return {boolean}\n */\n\nfunction isProbablyIpv4(hostname) {\n  var numberOfDots = 0;\n\n  for (var i = 0; i < hostname.length; i += 1) {\n    var code = hostname.charCodeAt(i);\n\n    if (code === 46) {\n      // '.'\n      numberOfDots += 1;\n    } else if (code < 48 || code > 57) {\n      // 48 => '0'\n      // 57 => '9'\n      return false;\n    }\n  }\n\n  return numberOfDots === 3 && hostname[0] !== '.' && hostname[hostname.length - 1] !== '.';\n}\n/**\n * Similar to isProbablyIpv4.\n *\n * @param {string} hostname\n * @return {boolean}\n */\n\n\nfunction isProbablyIpv6(hostname) {\n  var hasColon = false;\n\n  for (var i = 0; i < hostname.length; i += 1) {\n    var code = hostname.charCodeAt(i);\n\n    if (code === 58) {\n      // ':'\n      hasColon = true;\n    } else if (!(code >= 48 && code <= 57 || // 0-9\n    code >= 97 && code <= 102 // a-f\n    )) {\n      return false;\n    }\n  }\n\n  return hasColon;\n}\n/**\n * Check if `hostname` is *probably* a valid ip addr (either ipv6 or ipv4).\n * This *will not* work on any string. We need `hostname` to be a valid\n * hostname.\n *\n * @param {string} hostname\n * @return {boolean}\n */\n\n\nmodule.exports = function isIp(hostname) {\n  if (typeof hostname !== 'string') {\n    return false;\n  }\n\n  if (hostname.length === 0) {\n    return false;\n  }\n\n  return isProbablyIpv6(hostname) || isProbablyIpv4(hostname);\n};",
  "map": {
    "version": 3,
    "names": [
      "isProbablyIpv4",
      "hostname",
      "numberOfDots",
      "i",
      "length",
      "code",
      "charCodeAt",
      "isProbablyIpv6",
      "hasColon",
      "module",
      "exports",
      "isIp"
    ],
    "sources": ["/Users/danielleflinn/Documents/GitHub/clients/node_modules/tldjs/lib/is-ip.js"],
    "sourcesContent": [
      "'use strict';\n\n\n/**\n * Check if a hostname is an IP. You should be aware that this only works\n * because `hostname` is already garanteed to be a valid hostname!\n *\n * @param {string} hostname\n * @return {boolean}\n */\nfunction isProbablyIpv4(hostname) {\n  var numberOfDots = 0;\n\n  for (var i = 0; i < hostname.length; i += 1) {\n    var code = hostname.charCodeAt(i);\n\n    if (code === 46) { // '.'\n      numberOfDots += 1;\n    } else if (code < 48 || code > 57) {\n      // 48 => '0'\n      // 57 => '9'\n      return false;\n    }\n  }\n\n  return (\n    numberOfDots === 3  &&\n    hostname[0] !== '.' &&\n    hostname[hostname.length - 1] !== '.'\n  );\n}\n\n\n/**\n * Similar to isProbablyIpv4.\n *\n * @param {string} hostname\n * @return {boolean}\n */\nfunction isProbablyIpv6(hostname) {\n  var hasColon = false;\n\n  for (var i = 0; i < hostname.length; i += 1) {\n    var code = hostname.charCodeAt(i);\n\n    if (code === 58) { // ':'\n      hasColon = true;\n    } else if (!(\n      (code >= 48 && code <= 57) || // 0-9\n      (code >= 97 && code <= 102)   // a-f\n    )) {\n      return false;\n    }\n  }\n\n  return hasColon;\n}\n\n\n/**\n * Check if `hostname` is *probably* a valid ip addr (either ipv6 or ipv4).\n * This *will not* work on any string. We need `hostname` to be a valid\n * hostname.\n *\n * @param {string} hostname\n * @return {boolean}\n */\nmodule.exports = function isIp(hostname) {\n  if (typeof hostname !== 'string') {\n    return false;\n  }\n\n  if (hostname.length === 0) {\n    return false;\n  }\n\n  return (isProbablyIpv6(hostname) || isProbablyIpv4(hostname));\n};\n"
    ],
    "mappings": "AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;EAChC,IAAIC,YAAY,GAAG,CAAnB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;IAC3C,IAAIE,IAAI,GAAGJ,QAAQ,CAACK,UAAT,CAAoBH,CAApB,CAAX;;IAEA,IAAIE,IAAI,KAAK,EAAb,EAAiB;MAAE;MACjBH,YAAY,IAAI,CAAhB;IACD,CAFD,MAEO,IAAIG,IAAI,GAAG,EAAP,IAAaA,IAAI,GAAG,EAAxB,EAA4B;MACjC;MACA;MACA,OAAO,KAAP;IACD;EACF;;EAED,OACEH,YAAY,KAAK,CAAjB,IACAD,QAAQ,CAAC,CAAD,CAAR,KAAgB,GADhB,IAEAA,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAAR,KAAkC,GAHpC;AAKD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,cAAT,CAAwBN,QAAxB,EAAkC;EAChC,IAAIO,QAAQ,GAAG,KAAf;;EAEA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,IAAI,CAA1C,EAA6C;IAC3C,IAAIE,IAAI,GAAGJ,QAAQ,CAACK,UAAT,CAAoBH,CAApB,CAAX;;IAEA,IAAIE,IAAI,KAAK,EAAb,EAAiB;MAAE;MACjBG,QAAQ,GAAG,IAAX;IACD,CAFD,MAEO,IAAI,EACRH,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAAvB,IAA8B;IAC7BA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,GAFd,CAEqB;IAFrB,CAAJ,EAGJ;MACD,OAAO,KAAP;IACD;EACF;;EAED,OAAOG,QAAP;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAcV,QAAd,EAAwB;EACvC,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChC,OAAO,KAAP;EACD;;EAED,IAAIA,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,OAAQG,cAAc,CAACN,QAAD,CAAd,IAA4BD,cAAc,CAACC,QAAD,CAAlD;AACD,CAVD"
  },
  "metadata": {},
  "sourceType": "script"
}

{
  "ast": null,
  "code": "'use strict'; // Load rules\n\nvar Trie = require('./lib/suffix-trie.js');\n\nvar allRules = Trie.fromJson(require('./rules.json')); // Internals\n\nvar extractHostname = require('./lib/clean-host.js');\n\nvar getDomain = require('./lib/domain.js');\n\nvar getPublicSuffix = require('./lib/public-suffix.js');\n\nvar getSubdomain = require('./lib/subdomain.js');\n\nvar isValid = require('./lib/is-valid.js');\n\nvar isIp = require('./lib/is-ip.js');\n\nvar tldExists = require('./lib/tld-exists.js'); // Flags representing steps in the `parse` function. They are used to implement\n// a early stop mechanism (simulating some form of laziness) to avoid doing more\n// work than necessary to perform a given action (e.g.: we don't need to extract\n// the domain and subdomain if we are only interested in public suffix).\n\n\nvar TLD_EXISTS = 1;\nvar PUBLIC_SUFFIX = 2;\nvar DOMAIN = 3;\nvar SUB_DOMAIN = 4;\nvar ALL = 5;\n/**\n * Creates a new instance of tldjs\n * @param  {Object.<rules,validHosts>} options [description]\n * @return {tldjs|Object}                      [description]\n */\n\nfunction factory(options) {\n  var rules = options.rules || allRules || {};\n  var validHosts = options.validHosts || [];\n\n  var _extractHostname = options.extractHostname || extractHostname;\n  /**\n   * Process a given url and extract all information. This is a higher level API\n   * around private functions of `tld.js`. It allows to remove duplication (only\n   * extract hostname from url once for all operations) and implement some early\n   * termination mechanism to not pay the price of what we don't need (this\n   * simulates laziness at a lower cost).\n   *\n   * @param {string} url\n   * @param {number|undefined} _step - where should we stop processing\n   * @return {object}\n   */\n\n\n  function parse(url, _step) {\n    var step = _step || ALL;\n    var result = {\n      hostname: _extractHostname(url),\n      isValid: null,\n      isIp: null,\n      tldExists: false,\n      publicSuffix: null,\n      domain: null,\n      subdomain: null\n    };\n\n    if (result.hostname === null) {\n      result.isIp = false;\n      result.isValid = false;\n      return result;\n    } // Check if `hostname` is a valid ip address\n\n\n    result.isIp = isIp(result.hostname);\n\n    if (result.isIp) {\n      result.isValid = true;\n      return result;\n    } // Check if `hostname` is valid\n\n\n    result.isValid = isValid(result.hostname);\n    if (result.isValid === false) return result; // Check if tld exists\n\n    if (step === ALL || step === TLD_EXISTS) {\n      result.tldExists = tldExists(rules, result.hostname);\n    }\n\n    if (step === TLD_EXISTS) return result; // Extract public suffix\n\n    result.publicSuffix = getPublicSuffix(rules, result.hostname);\n    if (step === PUBLIC_SUFFIX) return result; // Extract domain\n\n    result.domain = getDomain(validHosts, result.publicSuffix, result.hostname);\n    if (step === DOMAIN) return result; // Extract subdomain\n\n    result.subdomain = getSubdomain(result.hostname, result.domain);\n    return result;\n  }\n\n  return {\n    extractHostname: _extractHostname,\n    isValid: isValid,\n    parse: parse,\n    tldExists: function (url) {\n      return parse(url, TLD_EXISTS).tldExists;\n    },\n    getPublicSuffix: function (url) {\n      return parse(url, PUBLIC_SUFFIX).publicSuffix;\n    },\n    getDomain: function (url) {\n      return parse(url, DOMAIN).domain;\n    },\n    getSubdomain: function (url) {\n      return parse(url, SUB_DOMAIN).subdomain;\n    },\n    fromUserSettings: factory\n  };\n}\n\nmodule.exports = factory({});",
  "map": {
    "version": 3,
    "names": [
      "Trie",
      "require",
      "allRules",
      "fromJson",
      "extractHostname",
      "getDomain",
      "getPublicSuffix",
      "getSubdomain",
      "isValid",
      "isIp",
      "tldExists",
      "TLD_EXISTS",
      "PUBLIC_SUFFIX",
      "DOMAIN",
      "SUB_DOMAIN",
      "ALL",
      "factory",
      "options",
      "rules",
      "validHosts",
      "_extractHostname",
      "parse",
      "url",
      "_step",
      "step",
      "result",
      "hostname",
      "publicSuffix",
      "domain",
      "subdomain",
      "fromUserSettings",
      "module",
      "exports"
    ],
    "sources": ["/Users/danielleflinn/Documents/GitHub/clients/node_modules/tldjs/index.js"],
    "sourcesContent": [
      "'use strict';\n\n\n// Load rules\nvar Trie = require('./lib/suffix-trie.js');\nvar allRules = Trie.fromJson(require('./rules.json'));\n\n// Internals\nvar extractHostname = require('./lib/clean-host.js');\nvar getDomain = require('./lib/domain.js');\nvar getPublicSuffix = require('./lib/public-suffix.js');\nvar getSubdomain = require('./lib/subdomain.js');\nvar isValid = require('./lib/is-valid.js');\nvar isIp = require('./lib/is-ip.js');\nvar tldExists = require('./lib/tld-exists.js');\n\n\n// Flags representing steps in the `parse` function. They are used to implement\n// a early stop mechanism (simulating some form of laziness) to avoid doing more\n// work than necessary to perform a given action (e.g.: we don't need to extract\n// the domain and subdomain if we are only interested in public suffix).\nvar TLD_EXISTS = 1;\nvar PUBLIC_SUFFIX = 2;\nvar DOMAIN = 3;\nvar SUB_DOMAIN = 4;\nvar ALL = 5;\n\n\n/**\n * Creates a new instance of tldjs\n * @param  {Object.<rules,validHosts>} options [description]\n * @return {tldjs|Object}                      [description]\n */\nfunction factory(options) {\n  var rules = options.rules || allRules || {};\n  var validHosts = options.validHosts || [];\n  var _extractHostname = options.extractHostname || extractHostname;\n\n  /**\n   * Process a given url and extract all information. This is a higher level API\n   * around private functions of `tld.js`. It allows to remove duplication (only\n   * extract hostname from url once for all operations) and implement some early\n   * termination mechanism to not pay the price of what we don't need (this\n   * simulates laziness at a lower cost).\n   *\n   * @param {string} url\n   * @param {number|undefined} _step - where should we stop processing\n   * @return {object}\n   */\n  function parse(url, _step) {\n    var step = _step || ALL;\n    var result = {\n      hostname: _extractHostname(url),\n      isValid: null,\n      isIp: null,\n      tldExists: false,\n      publicSuffix: null,\n      domain: null,\n      subdomain: null,\n    };\n\n    if (result.hostname === null) {\n      result.isIp = false;\n      result.isValid = false;\n      return result;\n    }\n\n    // Check if `hostname` is a valid ip address\n    result.isIp = isIp(result.hostname);\n    if (result.isIp) {\n      result.isValid = true;\n      return result;\n    }\n\n    // Check if `hostname` is valid\n    result.isValid = isValid(result.hostname);\n    if (result.isValid === false) return result;\n\n    // Check if tld exists\n    if (step === ALL || step === TLD_EXISTS) {\n      result.tldExists = tldExists(rules, result.hostname);\n    }\n    if (step === TLD_EXISTS) return result;\n\n    // Extract public suffix\n    result.publicSuffix = getPublicSuffix(rules, result.hostname);\n    if (step === PUBLIC_SUFFIX) return result;\n\n    // Extract domain\n    result.domain = getDomain(validHosts, result.publicSuffix, result.hostname);\n    if (step === DOMAIN) return result;\n\n    // Extract subdomain\n    result.subdomain = getSubdomain(result.hostname, result.domain);\n\n    return result;\n  }\n\n\n  return {\n    extractHostname: _extractHostname,\n    isValid: isValid,\n    parse: parse,\n    tldExists: function (url) {\n      return parse(url, TLD_EXISTS).tldExists;\n    },\n    getPublicSuffix: function (url) {\n      return parse(url, PUBLIC_SUFFIX).publicSuffix;\n    },\n    getDomain: function (url) {\n      return parse(url, DOMAIN).domain;\n    },\n    getSubdomain: function (url) {\n      return parse(url, SUB_DOMAIN).subdomain;\n    },\n    fromUserSettings: factory\n  };\n}\n\n\nmodule.exports = factory({});\n"
    ],
    "mappings": "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"
  },
  "metadata": {},
  "sourceType": "script"
}

{
  "ast": null,
  "code": "\"use strict\";\n/**\n * Check if the code point is a digit [0-9]\n *\n * @param {number} code\n * @return boolean\n */\n\nfunction isDigit(code) {\n  // 48 == '0'\n  // 57 == '9'\n  return code >= 48 && code <= 57;\n}\n/**\n * Check if the code point is a letter [a-zA-Z]\n *\n * @param {number} code\n * @return boolean\n */\n\n\nfunction isAlpha(code) {\n  // 97 === 'a'\n  // 122 == 'z'\n  return code >= 97 && code <= 122;\n}\n/**\n * Check if a hostname string is valid (according to RFC). It's usually a\n * preliminary check before trying to use getDomain or anything else.\n *\n * Beware: it does not check if the TLD exists.\n *\n * @api\n * @param {string} hostname\n * @return {boolean}\n */\n\n\nmodule.exports = function isValid(hostname) {\n  if (typeof hostname !== 'string') {\n    return false;\n  }\n\n  if (hostname.length > 255) {\n    return false;\n  }\n\n  if (hostname.length === 0) {\n    return false;\n  } // Check first character: [a-zA-Z0-9]\n\n\n  var firstCharCode = hostname.charCodeAt(0);\n\n  if (!(isAlpha(firstCharCode) || isDigit(firstCharCode))) {\n    return false;\n  } // Validate hostname according to RFC\n\n\n  var lastDotIndex = -1;\n  var lastCharCode;\n  var code;\n  var len = hostname.length;\n\n  for (var i = 0; i < len; i += 1) {\n    code = hostname.charCodeAt(i);\n\n    if (code === 46) {\n      // '.'\n      if ( // Check that previous label is < 63 bytes long (64 = 63 + '.')\n      i - lastDotIndex > 64 || // Check that previous character was not already a '.'\n      lastCharCode === 46 || // Check that the previous label does not end with a '-'\n      lastCharCode === 45) {\n        return false;\n      }\n\n      lastDotIndex = i;\n    } else if (!(isAlpha(code) || isDigit(code) || code === 45)) {\n      // Check if there is a forbidden character in the label: [^a-zA-Z0-9-]\n      return false;\n    }\n\n    lastCharCode = code;\n  }\n\n  return (// Check that last label is shorter than 63 chars\n    len - lastDotIndex - 1 <= 63 && // Check that the last character is an allowed trailing label character.\n    // Since we already checked that the char is a valid hostname character,\n    // we only need to check that it's different from '-'.\n    lastCharCode !== 45\n  );\n};",
  "map": {
    "version": 3,
    "names": [
      "isDigit",
      "code",
      "isAlpha",
      "module",
      "exports",
      "isValid",
      "hostname",
      "length",
      "firstCharCode",
      "charCodeAt",
      "lastDotIndex",
      "lastCharCode",
      "len",
      "i"
    ],
    "sources": ["/Users/danielleflinn/Documents/GitHub/clients/node_modules/tldjs/lib/is-valid.js"],
    "sourcesContent": [
      "\"use strict\";\n\n\n/**\n * Check if the code point is a digit [0-9]\n *\n * @param {number} code\n * @return boolean\n */\nfunction isDigit(code) {\n  // 48 == '0'\n  // 57 == '9'\n  return code >= 48 && code <= 57;\n}\n\n\n/**\n * Check if the code point is a letter [a-zA-Z]\n *\n * @param {number} code\n * @return boolean\n */\nfunction isAlpha(code) {\n  // 97 === 'a'\n  // 122 == 'z'\n  return code >= 97 && code <= 122;\n}\n\n\n/**\n * Check if a hostname string is valid (according to RFC). It's usually a\n * preliminary check before trying to use getDomain or anything else.\n *\n * Beware: it does not check if the TLD exists.\n *\n * @api\n * @param {string} hostname\n * @return {boolean}\n */\nmodule.exports = function isValid(hostname) {\n  if (typeof hostname !== 'string') {\n    return false;\n  }\n\n  if (hostname.length > 255) {\n    return false;\n  }\n\n  if (hostname.length === 0) {\n    return false;\n  }\n\n  // Check first character: [a-zA-Z0-9]\n  var firstCharCode = hostname.charCodeAt(0);\n  if (!(isAlpha(firstCharCode) || isDigit(firstCharCode))) {\n    return false;\n  }\n\n  // Validate hostname according to RFC\n  var lastDotIndex = -1;\n  var lastCharCode;\n  var code;\n  var len = hostname.length;\n\n  for (var i = 0; i < len; i += 1) {\n    code = hostname.charCodeAt(i);\n\n    if (code === 46) { // '.'\n      if (\n        // Check that previous label is < 63 bytes long (64 = 63 + '.')\n        (i - lastDotIndex) > 64 ||\n        // Check that previous character was not already a '.'\n        lastCharCode === 46 ||\n        // Check that the previous label does not end with a '-'\n        lastCharCode === 45\n      ) {\n        return false;\n      }\n\n      lastDotIndex = i;\n    } else if (!(isAlpha(code) || isDigit(code) || code === 45)) {\n      // Check if there is a forbidden character in the label: [^a-zA-Z0-9-]\n      return false;\n    }\n\n    lastCharCode = code;\n  }\n\n  return (\n    // Check that last label is shorter than 63 chars\n    (len - lastDotIndex - 1) <= 63 &&\n    // Check that the last character is an allowed trailing label character.\n    // Since we already checked that the char is a valid hostname character,\n    // we only need to check that it's different from '-'.\n    lastCharCode !== 45\n  );\n};\n"
    ],
    "mappings": "AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;EACrB;EACA;EACA,OAAOA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA7B;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBD,IAAjB,EAAuB;EACrB;EACA;EACA,OAAOA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,GAA7B;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,QAAjB,EAA2B;EAC1C,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IAChC,OAAO,KAAP;EACD;;EAED,IAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAtB,EAA2B;IACzB,OAAO,KAAP;EACD;;EAED,IAAID,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;IACzB,OAAO,KAAP;EACD,CAXyC,CAa1C;;;EACA,IAAIC,aAAa,GAAGF,QAAQ,CAACG,UAAT,CAAoB,CAApB,CAApB;;EACA,IAAI,EAAEP,OAAO,CAACM,aAAD,CAAP,IAA0BR,OAAO,CAACQ,aAAD,CAAnC,CAAJ,EAAyD;IACvD,OAAO,KAAP;EACD,CAjByC,CAmB1C;;;EACA,IAAIE,YAAY,GAAG,CAAC,CAApB;EACA,IAAIC,YAAJ;EACA,IAAIV,IAAJ;EACA,IAAIW,GAAG,GAAGN,QAAQ,CAACC,MAAnB;;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAApB,EAAyBC,CAAC,IAAI,CAA9B,EAAiC;IAC/BZ,IAAI,GAAGK,QAAQ,CAACG,UAAT,CAAoBI,CAApB,CAAP;;IAEA,IAAIZ,IAAI,KAAK,EAAb,EAAiB;MAAE;MACjB,KACE;MACCY,CAAC,GAAGH,YAAL,GAAqB,EAArB,IACA;MACAC,YAAY,KAAK,EAFjB,IAGA;MACAA,YAAY,KAAK,EANnB,EAOE;QACA,OAAO,KAAP;MACD;;MAEDD,YAAY,GAAGG,CAAf;IACD,CAbD,MAaO,IAAI,EAAEX,OAAO,CAACD,IAAD,CAAP,IAAiBD,OAAO,CAACC,IAAD,CAAxB,IAAkCA,IAAI,KAAK,EAA7C,CAAJ,EAAsD;MAC3D;MACA,OAAO,KAAP;IACD;;IAEDU,YAAY,GAAGV,IAAf;EACD;;EAED,OACE;IACCW,GAAG,GAAGF,YAAN,GAAqB,CAAtB,IAA4B,EAA5B,IACA;IACA;IACA;IACAC,YAAY,KAAK;EANnB;AAQD,CAzDD"
  },
  "metadata": {},
  "sourceType": "script"
}
